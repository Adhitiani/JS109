/*
Given a string that includes alphanumeric characters ('3a4B2d') return the expansion of that string: The numeric values represent the occurrence of each letter preceding that numeric value. There should be no numeric characters in the final string. Empty strings should return an empty string.

The first occurrence of a numeric value should be the number of times each character behind it is repeated, until the next numeric value appears.

stringExpansion('3D2a5d2f') === 'DDDaadddddff'
stringExpansion('3abc') === 'aaabbbccc'      // correct
stringExpansion('3abc') !== 'aaabc'          // wrong
stringExpansion('3abc') !== 'abcabcabc'      // wrong

If there are two consecutive numeric characters the first one is ignored.

stringExpansion('3d332f2a') === 'dddffaa'

If there are two consecutive alphabetic characters then the first character has no effect on the one after it.

stringExpansion('abcde') === 'abcde'

Your code should be able to work for both lower and capital case letters.

stringExpansion('') === ''
*/

/*
PROBLEM
input: string; letter and numeric chars
- the letter will consist uppercase and lowercase
output: string
the expanding of the string
- the numeric value is the number of occurance of each letter preceding that numeric value

rules/question:
- no numeric char in the output
- empty string return empty string
- the letters are case sensitive
- The a numeric value should be the number of times each character behind it is repeated, until the next numeric value appears.
- If there are two consecutive numeric characters the first one is ignored.
- if there are no numerical chars then return the input string as is.

stringExpansion('3d332f2a') === 'dddffaa'

EXAMPLE
'3d332f2a'
3d --> ddd
332f --> ff
2a --> aa
abc3de --> abcdddeee

'3d332f2a'
''
[3d]
temp: 3

DATA STRUCTURE
input : string
an array separeated the number with its associated letter
output: string

ALGORITHM
- init 'substringArr' = [];
- init 'digitst' = '1234567890'
- init 'temp' = 'str[0]'

// get the number and letter in separeted group
  - iterate over the string input 
strat at index 1
    - init curr char to string  current index 
    - init prev char  string current index - 1
    - if the prevchar is number and the curr char is letter
       - concatenated the currchar to temp
    - if the prev is letter and the curr is letter
       - concatenated the currhcar to temp
    - if the currchar is number and prev is number
      - temp = currchar
    - if the prev is letter and the curr is number
      - push the temp to substringArr
      - temp = currChar 
  - end iteration
// expanded the letter based on the number infront of them
   iterate over the substringArr
   // init an empty result ''
   - init number = 0
   - if the char is number , number = curr char
   - if the char is letter, repeeat the char as many as the number
    - concatenated to result
    - return result
   end iteration
// join them together in string
// return the string
*/

function stringExpansion(str) {
  let digits = '1234567890';
  if(str.length === 0) return '';
  if(str.split('').every(char => !digits.includes(char))) return str;
  let substringArr = [];
  let temp = str[0]

  for (let i = 1; i < str.length; i++ ) {
    let currChar = str[i];
    let prevChar = str[i - 1];

    if(digits.includes(prevChar) && !digits.includes(currChar)) {
      temp += currChar;
    }
    if(!digits.includes(prevChar) && !digits.includes(currChar)) {
      temp += currChar;
    }
    if(!digits.includes(prevChar) && digits.includes(currChar)) {
   substringArr.push(temp);
      temp = currChar;
    }
    if(digits.includes(prevChar) && digits.includes(currChar)) {
      temp = currChar;
    }
  }
  substringArr.push(temp);
  let resultArr = substringArr.map(str => {
    let number = 0;
    let tempStr = ''
    for (let i = 0; i < str.length; i ++) {
      if (digits.includes(str[i])) {
        number = Number(str[i])
      } else {
         tempStr += str[i].repeat(number)
      }
    }
    return tempStr
  })
  return resultArr.join('');
}

console.log(stringExpansion('3D2a5d2f') === 'DDDaadddddff');
console.log(stringExpansion('3abc') === 'aaabbbccc');      
console.log(stringExpansion('3d332f2a') === 'dddffaa');
console.log(stringExpansion('abcde') === 'abcde');
console.log(stringExpansion('') === '');